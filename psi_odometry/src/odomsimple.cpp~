#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>
#include <std_msgs/Int32MultiArray.h>
#include "math.h"
#include "std_msgs/String.h"
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <cmath>
#define radius_of_wheel .065
#define distance_between_wheels .25 
#define left_counts_per_m 18000
#define right_counts_per_m 18000

double x = 0.0;
double y = 0.0;
double th =0.0;
double vx = 0.0;
double vy = 0.0;
double vth =0.0;


float left_counts, right_counts,rc=0,lc=0, L_ticks, R_ticks, last_left, last_right ;
float left_distance, right_distance, distance,total_distance;
void call_back(const std_msgs::Int32MultiArray::ConstPtr& speed)
{
    right_counts = -speed->data[0];
    left_counts = speed->data[1]; //angular velocities
   // ROS_INFO("r :%d",right_counts);
   // ROS_INFO("l :%d",left_counts);
  /*  vmotor_right = vmotor_right/60;
    vmotor_left =  vmotor_left/60;
    v_right=vmotor_right*0.065;
    v_left=vmotor_left*0.065;  
    ROS_INFO("v_left:%f",v_left);
    ROS_INFO("v_right:%f",v_right);


   vx = (v_right + v_left)/2 ;
   vy = 0;
   vth = (v_right-v_left)/0.250;
  //ROS_INFO("vx :%f, vth :%f",vx,vth);*/
 L_ticks=left_counts-last_left;
 R_ticks=right_counts-last_right;
//ROS_INFO("r :%d",R_ticks);
   // ROS_INFO("l :%d",L_ticks);
 
    //ROS_INFO("r :%d",last_left);t
    //ROS_INFO("l :%d",last_right);
 left_distance=L_ticks / 18000;
 right_distance=R_ticks / 18000;
//ROS_INFO("r :%f",right_distance);
  //  ROS_INFO("l :%f",left_distance);
 distance=(left_distance+right_distance)/2;
  total_distance += distance;
  ROS_INFO("total distance  :%f meters",total_distance);

}



int main(int argc, char** argv)
{
  ros::init(argc, argv, "odomsimple");
  
  ros::NodeHandle n;
  ros::NodeHandle o;
  ros::Subscriber odom_sub=o.subscribe("/speed_counter",1,call_back);
  ros::Publisher odom_pub = n.advertise<nav_msgs::Odometry>("odom", 50);
  
  tf::TransformBroadcaster odom_broadcaster;

 

  
  ros::Time current_time, last_time;
  current_time = ros::Time::now();
  last_time = ros::Time::now();

  ros::Rate r(50.0);
  while(n.ok()){

    ros::spinOnce();               // check for incoming messages
    current_time = ros::Time::now();

   //compute odometry in a typical way given the velocities of the robot
    double dt = (current_time - last_time).toSec();
    //ROS_INFO("dt : %f",dt);	
    //double delta_x = (vx * cos(th) - vy * sin(th)) * dt;
    //double delta_y = (vx * sin(th) + vy * cos(th)) * dt;
    //double delta_th = vth * dt;
   if ((last_right!=right_counts)||(last_left!=left_counts))
{
    th += (right_distance-left_distance) / distance_between_wheels;
    
    //th -= (float)((int)(th/2*3.14))*(2*3.14);
    x += distance*cos(th);
    y += distance*sin(th);
    vx =distance*cos(th)/dt;
    vy =distance*sin(th)/dt;
   vth=th/dt;
	
}
ROS_INFO("th : %f",th);   
 last_left=left_counts;
 last_right=right_counts;
    ROS_INFO(" X : %f ",x);  
    ROS_INFO(" Y : %f ",y);
    //since all odometry is 6DOF we'll need a quaternion created from yaw
    geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);

    //first, we'll publish the transform over tf
    geometry_msgs::TransformStamped odom_trans;
    odom_trans.header.stamp = current_time;
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";

    odom_trans.transform.translation.x = x;
    odom_trans.transform.translation.y = y;
    odom_trans.transform.translation.z = 0.0;
    odom_trans.transform.rotation = odom_quat;

    //send the transform
    odom_broadcaster.sendTransform(odom_trans);

    //next, we'll publish the odometry message over ROS
    nav_msgs::Odometry odom;
    odom.header.stamp = current_time;
    odom.header.frame_id = "odom";

    //set the position
    odom.pose.pose.position.x = x;
    odom.pose.pose.position.y = y;
    odom.pose.pose.position.z = 0.0;
    odom.pose.pose.orientation = odom_quat;

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = vx;
    odom.twist.twist.linear.y = vy;
    odom.twist.twist.angular.z = vth;

    //publish the message
    odom_pub.publish(odom);

    last_time = current_time;
    r.sleep();
  }
}
