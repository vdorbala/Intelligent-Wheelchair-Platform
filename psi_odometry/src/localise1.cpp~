#include "ros/ros.h"
#include "std_msgs/String.h"
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <std_msgs/Int32MultiArray.h>
#include <cmath>

#define pi = 3.1416
using namespace std;
double rps1,rps2,count1,count2;
double vx, vy, vth;
double x=0, y=0, th=0;//theta
float w; //angularvelocity3//
float r=65;//(radius of wheel)
float l;//(turning radius)
float b=250;//distance between 2 wheels
float w3;
ros::Time current_time, last_time;

void call_back (const std_msgs::Int32MultiArray::ConstPtr& speed) 
	{
	int l = speed->data[2], r = speed->data[3], dl = speed->data[0], dr = speed->data[1];
	ROS_INFO("Got values: %d, %d, %d, %d", l, r, dl, dr);
	

	int L = dl, R=dr, DIREC ;
	double DL, DR, DAVG, DIFF, VL, VR, OMEGA;

	//distances travelled
	double meters_per_revolution = 408.408;
	DL 		=	 L*meters_per_revolution / (60*91);
	DR		= 	 R*meters_per_revolution / (60*91);
	DAVG	=	 (DL+DR)/2		  ;
	DIFF	=	 (DL-DR)/2		  ;

	if (DIFF > 0)
		{
		//moving right
		DIREC	=	1;
		}

	else if (DIFF < 0)
		{
		//moving left
		DIREC	=	-1;
		}
	else 
		{
		//moving straight
		DIREC	=	0;
		}
	
	//radius for arc 
	float radius = ((DR*b)/(DL-DR));
	float theta  =  DR/radius;
	float radian_per_count = (408.408/b)/(512*4);
	float delta_heading = (DL-DR)/b;

	vx = DAVG;
	vy = 0;
	vth = delta_heading;

	ROS_INFO("Calculated vx: %f,  vth: %f", vx, vth);
}
	
	


	
	 
	 

int main(int argc,char** argv)
{
	ros::init(argc,argv,"localise");

	ros::NodeHandle o;
	vx=vy=vth=0;
	ros::Subscriber s = o.subscribe("/speed_counter",1,call_back);
	ros::Rate r(20);

    	while(ros::ok())
	
{
	 current_time = ros::Time::now();
    //ROS_INFO("vx: %f  vy: %f  vth: %f\n", vx, vy, vth);

    //compute odometry in a typical way given the velocities of the robot
    double dt = (current_time - last_time).toSec();
    last_time = current_time;
    double delta_x = (vx * cos(th) - vy * sin(th)) * dt;
    double delta_y = (vx * sin(th) + vy * cos(th)) * dt;
    double delta_th = vth * dt;

    x += delta_x;
    y += delta_y;
    th += delta_th;
	ROS_INFO("X  = %f/n",x);
        ROS_INFO("y  = %f/n",y);
		
	ros::spinOnce(); 
      
	}
ros::spinOnce();
    r.sleep();
     
      return 0;
}
