#include "ros/ros.h"
#include "std_msgs/String.h"
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <geometry_msgs/Twist.h>
#include "mytele/RoboteqDevice.h"
#include "mytele/ErrorCodes.h"
#include "mytele/Constants.h"
 

RoboteqDevice device ;
using namespace std;
void cmd_velocityCallback (const geometry_msgs::Twist::ConstPtr& twist)
{ 
  float lin_vel_ = twist->linear.x;
  float ang_vel_ = twist->angular.z;
int status =0;
  int m1,m2=0;

 if (ang_vel_==1)
   m2=1;
 
 if (ang_vel_==-1) 
   m1=1;
     
 if (lin_vel_==1)
  { m1=1;
    m2=1;
  }
  
  if(lin_vel_==-1)
  { m1=-1;
    m2=-1;
  }
  
if device.SetCommand(_G, 1, m1*300) ;
	
	ROS_INFO("linear vel =");
device.SetCommand(_G, 2, m2*300) ;
		ROS_INFO("ang vel=",ang_vel_);

}
  
int main(int argc, char *argv[])
{
    

     ros::init(argc, argv, "listen");
   

        ros::NodeHandle n;
      
        string response = "";
	RoboteqDevice device;
	int status = device.Connect("/dev/ttyACM0");

	if(status != RQ_SUCCESS)
	{
		cout<<"Error connecting to device: "<<status<<"."<<endl;
		return 1;
	}

	cout<<"- SetConfig(_DINA, 1, 1)...";
	if((status = device.SetConfig(_DINA, 1, 1)) != RQ_SUCCESS)
		cout<<"failed --> "<<status<<endl;
	else
		cout<<"succeeded."<<endl;

	//Wait 10 ms before sending another command to device
	sleepms(10);

	int result;
	cout<<"- GetConfig(_DINA, 1)...";
	if((status = device.GetConfig(_DINA, 1, result)) != RQ_SUCCESS)
		cout<<"failed --> "<<status<<endl;
	else
		cout<<"returned --> "<<result<<endl;

	//Wait 10 ms before sending another command to device
	sleepms(10);

	cout<<"- GetValue(_ANAIN, 1)...";
	if((status = device.GetValue(_ANAIN, 1, result)) != RQ_SUCCESS)
		cout<<"failed --> "<<status<<endl;
	else
		cout<<"returned --> "<<result<<endl;

	//Wait 10 ms before sending another command to device
	sleepms(10);

	cout<<"- SetCommand(_GO, 1, 1)...";
	if((status = device.SetCommand(_GO, 1, 1)) != RQ_SUCCESS)
		cout<<"failed --> "<<status<<endl;
	else
	{	cout<<"succeeded."<<endl;
                         }
	

        ros::Subscriber sub = n.subscribe("turtle1/cmd_velocity", 1, cmd_velocityCallback);

      ros::spinOnce();
return 0;
}

