#include "ros/ros.h"
#include "std_msgs/String.h"
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <geometry_msgs/Twist.h>
#include "mytele/RoboteqDevice.h"
#include "mytele/ErrorCodes.h"
#include "mytele/Constants.h"


using namespace std;
RoboteqDevice device;
double lin_vel_;
double ang_vel_;

void motor()
{    

	int status=0;
RoboteqDevice device;

int m1,m2=0;

 if (ang_vel_==2.0)
   m2=1;
 
 if (ang_vel_==-2.0) 
   m1=1;
     
 if (lin_vel_==2.0)
  { m1=1;
    m2=1;
  }
  
  if(lin_vel_==-2.0)
  { m1=-1;
    m2=-1;
  }
 
  if((status = device.SetCommand(_G, 1, m1*300) != RQ_SUCCESS)) {
		ROS_INFO("Failed... Error code --> ", status);
	}
     cout<<"hello"<<endl;
device.SetCommand(_G, 2, m2*300) ;
		ROS_INFO("ang vel=",ang_vel_);

} 


  
void cmd_velocityCallback(const geometry_msgs::Twist::ConstPtr& vel)
{ 
  double lin_vel_ = vel->linear.x;
  double ang_vel_ = vel->angular.z;
  ROS_INFO("linear velocity= ",lin_vel_);
  ROS_INFO("angular velocity= ",ang_vel_); 
  motor();
}



int main(int argc, char *argv[])
{
    

     ros::init(argc, argv, "listener");
   
        string response = "";
	ROS_INFO("\n\n--- Roboteq Motor Controller Request Gateway Server ---\n");
	ROS_INFO("Initializing...");
	usleep(500000);
	
	int status = device.Connect("/dev/ttyACM0");

	while (status != RQ_SUCCESS && ros::ok())
	{
		ROS_INFO("Error connecting to device: ", status, "\n");
		ROS_INFO("Attempting server restart...");
		usleep(999999);
		device.Disconnect();
a
		status = device.Connect("/dev/ttyACM0");
		if (status == 0) {
			ROS_INFO("Connection re-established...");
		}
	}
	ros::NodeHandle n;
	ros::Subscriber sub = n.subscribe("turtlesim/velocity", 1, cmd_velocityCallback);
        
	
	 ros::spin();
	return 0;
}

